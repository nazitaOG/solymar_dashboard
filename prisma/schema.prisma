// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReservationState {
  PENDING
  CONFIRMED
  CANCELLED
}

/**
 * =========================
 * USUARIOS / ROLES (M2M)
 * =========================
 */

model User {
  id             String   @id @default(uuid()) @db.Uuid
  hashedPassword String
  email          String   @unique
  username       String   @unique
  uploadDate     DateTime @default(now())

  reservations Reservation[]
  roleUsers    RoleUser[]
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  description String
  uploadDate  DateTime @default(now())

  roleUsers RoleUser[]
}

model RoleUser {
  roleId     String   @db.Uuid
  userId     String   @db.Uuid
  uploadDate DateTime @default(now())

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([roleId, userId]) // PK compuesta
}

/**
 * =========================
 * RESERVAS E ITEMS
 * =========================
 */

model Reservation {
  id         String           @id @default(uuid()) @db.Uuid
  userId     String           @db.Uuid
  uploadDate DateTime         @default(now())
  totalPrice Decimal          @db.Decimal(18, 2)
  state      ReservationState @default(PENDING)

  user            User             @relation(fields: [userId], references: [id], onDelete: Restrict)
  hotels          Hotel[]
  planes          Plane[]
  cruises         Cruise[]
  transfers       Transfer[]
  excursions      Excursion[]
  medicalAssists  MedicalAssist[]
  paxReservations PaxReservation[]
}

model Hotel {
  id               String   @id @default(uuid()) @db.Uuid
  startDate        DateTime
  endDate          DateTime
  city             String
  hotelName        String
  bookingReference String
  totalPrice       Decimal  @db.Decimal(18, 2)
  amountPaid       Decimal  @db.Decimal(18, 2)
  roomType         String
  provider         String
  reservationId    String   @db.Uuid
  uploadDate       DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Plane {
  id               String   @id @default(uuid()) @db.Uuid
  departure        String
  arrival          String
  departureDate    DateTime
  arrivalDate      DateTime
  totalPrice       Decimal  @db.Decimal(18, 2)
  amountPaid       Decimal  @db.Decimal(18, 2)
  bookingReference String
  provider         String
  reservationId    String   @db.Uuid
  uploadDate       DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Cruise {
  id               String   @id @default(uuid()) @db.Uuid
  startDate        DateTime
  endDate          DateTime
  bookingReference String
  provider         String
  embarkationPort  String
  arrivalPort      String
  totalPrice       Decimal  @db.Decimal(18, 2)
  amountPaid       Decimal  @db.Decimal(18, 2)
  reservationId    String   @db.Uuid
  uploadDate       DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Transfer {
  id               String   @id @default(uuid()) @db.Uuid
  pickup           String
  dropOff          String
  pickupDate       DateTime
  bookingReference String
  provider         String
  reservationId    String   @db.Uuid
  totalPrice       Decimal  @db.Decimal(18, 2)
  amountPaid       Decimal  @db.Decimal(18, 2)
  uploadDate       DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Excursion {
  id            String   @id @default(uuid()) @db.Uuid
  totalPrice    Decimal  @db.Decimal(18, 2)
  amountPaid    Decimal  @db.Decimal(18, 2)
  provider      String
  excursionDate DateTime
  excursionName String
  reservationId String   @db.Uuid
  uploadDate    DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model MedicalAssist {
  id               String   @id @default(uuid()) @db.Uuid
  totalPrice       Decimal  @db.Decimal(18, 2)
  amountPaid       Decimal  @db.Decimal(18, 2)
  bookingReference String
  assistType       String
  provider         String
  reservationId    String   @db.Uuid
  uploadDate       DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

/**
 * =========================
 * PAX / DOCUMENTOS (1â€“1)
 * =========================
 */

model Pax {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  birthDate   DateTime
  nationality String
  uploadDate  DateTime @default(now())

  passport Passport?
  dni      Dni?

  paxReservations PaxReservation[]
}

model Passport {
  id             String   @id @default(uuid()) @db.Uuid
  passportNum    String   @unique
  expirationDate DateTime
  uploadDate     DateTime @default(now())

  paxId String @unique @db.Uuid
  pax   Pax    @relation(fields: [paxId], references: [id], onDelete: Cascade)
}

model Dni {
  id             String   @id @default(uuid()) @db.Uuid
  dniNum         String   @unique
  expirationDate DateTime
  uploadDate     DateTime @default(now())

  paxId String @unique @db.Uuid
  pax   Pax    @relation(fields: [paxId], references: [id], onDelete: Cascade)
}

/**
 * =========================
 * JOIN PAX <-> RESERVATION
 * =========================
 */

model PaxReservation {
  id            String   @id @default(uuid()) @db.Uuid
  paxId         String   @db.Uuid
  reservationId String   @db.Uuid
  uploadDate    DateTime @default(now())

  pax         Pax         @relation(fields: [paxId], references: [id], onDelete: Cascade)
  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@unique([paxId, reservationId])
  @@index([reservationId])
  @@index([paxId])
}
