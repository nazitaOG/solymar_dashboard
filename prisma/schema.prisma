// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReservationState {
  PENDING
  CONFIRMED
  CANCELLED
}

enum TransportType {
  PICKUP
  BUS
  TRAIN
  FERRY
  OTHER
}

/**
 * =========================
 * USUARIOS / ROLES (M2M)
 * =========================
 */

model User {
  id             String  @id @default(uuid()) @db.Uuid
  hashedPassword String
  email          String  @unique
  username       String  @unique
  isActive       Boolean @default(true)

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  reservations Reservation[]
  roleUsers    RoleUser[]
}

model Role {
  id          String @id @default(uuid()) @db.Uuid
  description String @unique

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  roleUsers RoleUser[]
}

model RoleUser {
  roleId String @db.Uuid
  userId String @db.Uuid

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([roleId, userId]) // PK compuesta
}

/**
 * =========================
 * RESERVAS E ITEMS
 * =========================
 */

model Reservation {
  id         String           @id @default(uuid()) @db.Uuid
  userId     String           @db.Uuid
  totalPrice Decimal          @db.Decimal(18, 2)
  state      ReservationState @default(PENDING)

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  user            User             @relation(fields: [userId], references: [id], onDelete: Restrict)
  hotels          Hotel[]
  planes          Plane[]
  cruises         Cruise[]
  transfers       Transfer[]
  excursions      Excursion[]
  medicalAssists  MedicalAssist[]
  paxReservations PaxReservation[]
}

model Hotel {
  id               String   @id @default(uuid()) @db.Uuid
  startDate        DateTime
  endDate          DateTime
  city             String   @db.VarChar(128)
  hotelName        String   @db.VarChar(255)
  bookingReference String   @db.VarChar(255)
  totalPrice       Decimal  @db.Decimal(18, 2)
  amountPaid       Decimal  @db.Decimal(18, 2)
  roomType         String   @db.VarChar(255)
  provider         String   @db.VarChar(128)
  reservationId    String   @db.Uuid

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Plane {
  id               String    @id @default(uuid()) @db.Uuid
  departure        String    @db.VarChar(128)
  arrival          String?   @db.VarChar(128)
  departureDate    DateTime
  arrivalDate      DateTime?
  totalPrice       Decimal   @db.Decimal(18, 2)
  amountPaid       Decimal   @db.Decimal(18, 2)
  bookingReference String    @db.VarChar(255)
  provider         String?   @db.VarChar(128)
  notes            String?   @db.Text
  reservationId    String    @db.Uuid

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Cruise {
  id               String    @id @default(uuid()) @db.Uuid
  startDate        DateTime
  endDate          DateTime?
  bookingReference String?   @db.VarChar(255)
  provider         String    @db.VarChar(128)
  embarkationPort  String    @db.VarChar(128)
  arrivalPort      String?   @db.VarChar(128)
  totalPrice       Decimal   @db.Decimal(18, 2)
  amountPaid       Decimal   @db.Decimal(18, 2)
  reservationId    String    @db.Uuid

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Transfer {
  id               String        @id @default(uuid()) @db.Uuid
  origin           String        @db.VarChar(128)
  destination      String?       @db.VarChar(128)
  departureDate    DateTime
  bookingReference String?       @db.VarChar(128)
  arrivalDate      DateTime
  provider         String        @db.VarChar(128)
  reservationId    String        @db.Uuid
  totalPrice       Decimal       @db.Decimal(18, 2)
  amountPaid       Decimal       @db.Decimal(18, 2)
  transportType    TransportType @default(PICKUP)

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Excursion {
  id               String   @id @default(uuid()) @db.Uuid
  totalPrice       Decimal  @db.Decimal(18, 2)
  amountPaid       Decimal  @db.Decimal(18, 2)
  origin           String   @db.VarChar(128)
  provider         String   @db.VarChar(128)
  bookingReference String?  @db.VarChar(128)
  excursionDate    DateTime
  excursionName    String   @db.VarChar(255)
  reservationId    String   @db.Uuid

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model MedicalAssist {
  id               String  @id @default(uuid()) @db.Uuid
  totalPrice       Decimal @db.Decimal(18, 2)
  amountPaid       Decimal @db.Decimal(18, 2)
  bookingReference String  @db.VarChar(255)
  assistType       String? @db.VarChar(128)
  provider         String  @db.VarChar(128)
  reservationId    String  @db.Uuid

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

/**
 * =========================
 * PAX / DOCUMENTOS (1â€“1)
 * =========================
 */

model Pax {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  birthDate   DateTime
  nationality String

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  passport Passport?
  dni      Dni?

  paxReservations PaxReservation[]
}

model Passport {
  id             String   @id @default(uuid()) @db.Uuid
  passportNum    String   @unique
  expirationDate DateTime

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  paxId String @unique @db.Uuid
  pax   Pax    @relation(fields: [paxId], references: [id], onDelete: Cascade)
}

model Dni {
  id             String   @id @default(uuid()) @db.Uuid
  dniNum         String   @unique
  expirationDate DateTime

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  paxId String @unique @db.Uuid
  pax   Pax    @relation(fields: [paxId], references: [id], onDelete: Cascade)
}

/**
 * =========================
 * JOIN PAX <-> RESERVATION
 * =========================
 */

model PaxReservation {
  id            String @id @default(uuid()) @db.Uuid
  paxId         String @db.Uuid
  reservationId String @db.Uuid

  // audit
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt
  createdBy String   @db.Uuid
  updatedBy String   @db.Uuid

  pax         Pax         @relation(fields: [paxId], references: [id], onDelete: Cascade)
  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@unique([paxId, reservationId])
  @@index([reservationId])
  @@index([paxId])
}
